#!/bin/bash
##
# Author: Himbeertoni
# Email: Toni.Himbeer@fn.de
# Github: https://www.github.com/himbeer-toni
  Version=0.99-047
# 
# This script is available for
# public use under GPL V3 (see
# https://www.gnu.org/licenses/gpl-3.0.en.html )
# 
# Â©2025 Himbeertoni
# 
##

if [[ $EUID -eq 0 ]]; then
  echo "ERROR: This script must NOT be run as root." >&2
  exit 1
fi

md=0
if [[ $# -gt 1 && "$1" == "-md" ]]; then
  md=1
  shift
fi

if [[ $# -ne 1 ]]; then
  echo "Usage: $0 [-md] https://hostname[:port]/"
  exit 2
fi

url="$1"
hostPort=$(echo "$url" | sed -n 's#https://\([^/]\+\).*#\1#p')
host=$(echo "$hostPort" | cut -d: -f1)
port=$(echo "$hostPort" | grep ':' >/dev/null && echo "$hostPort" | cut -d: -f2 || echo 443)

if [[ "$PWD" == "/etc/ssl/certs" ]]; then
  echo "ERROR: Refusing to write certificates in /etc/ssl/certs."
  exit 3
fi

# If SSL already works, then we're done
curl -sSIi $1 2>&1 >/dev/null
if [ $? == 0 ]; then
	echo "SSL connection to $url works - exiting"
	exit 0
fi

set -euo pipefail

tmpDir=$(mktemp -d)
trap 'rm -rf "$tmpDir"' EXIT

# Fetch and split the cert chain
openssl s_client -showcerts -connect "${host}:${port}" -servername "$host" < /dev/null > "$tmpDir/chain.txt" 2>/dev/null
awk '/-----BEGIN CERTIFICATE-----/,/-----END CERTIFICATE-----/{
    if (/-----BEGIN CERTIFICATE-----/) {i++}
    print > "'$tmpDir'/cert" i ".crt"
}' "$tmpDir/chain.txt"

# Function to create a "speaking" filename from the issuer CN
makeCertFilename() {
  local cn="$1"
  # Split into words
  read -ra words <<<"$cn"
  if (( ${#words[@]} == 0 )); then
    echo ""
    return
  fi
  fname="${words[0]}"
  for word in "${words[@]:1}"; do
    if (( ${#word} > 8 )); then
      fname="${fname}$(echo "$word" | cut -c1-5)"
    else
      fname="${fname}${word}"
    fi
  done
  # Remove non-alphanum and limit to 30 chars
  fname=$(echo "$fname" | tr -cd '[:alnum:]' | cut -c1-40)
  echo "$fname.crt"
}

declare -a certInfo
for file in "$tmpDir"/cert*.crt; do
  # Extract issuer CN, fallback to hash if not found
	issuerCN=$(openssl x509 -in "$file" -noout -subject  | sed -E 's/.*CN *= *//;s/\*/X/g')
  if [[ -n "$issuerCN" ]]; then
    fileName=$(makeCertFilename "$issuerCN")
  fi
  if [[ -z "$fileName" ]]; then
    fileName="$(openssl x509 -noout -hash -in "$file").crt"
  fi
  cp "$file" "./$fileName"

  subjectRaw=$(openssl x509 -in "$file" -noout -subject | sed -e 's/^subject=//' -e 's/ *= */=/g')
  issuerRaw=$(openssl x509 -in "$file" -noout -issuer | sed -e 's/^issuer=//' -e 's/ *= */=/g')

  # Classify cert type
  if [[ "$subjectRaw" == "$issuerRaw" ]]; then
    certType="Root CA"
    orderKey="0"
  elif openssl x509 -in "$file" -noout -text | grep -q "CA:TRUE"; then
    certType="Intermediate CA"
    orderKey="1"
  else
    certType="End-Entity"
    orderKey="2"
  fi
  certInfo+=( "$orderKey|$fileName|$certType|$subjectRaw|$issuerRaw" )
done

IFS=$'\n' sorted=($(sort <<<"${certInfo[*]}"))
unset IFS

if [[ $md -eq 0 ]]; then
  echo "$url"
  for line in "${sorted[@]}"; do
    IFS='|' read -r _ fileName certType subjectRaw issuerRaw <<<"$line"
    echo " $fileName"
    echo "  type: $certType"
    echo "$subjectRaw" | sed -E 's/(, )?(CN=[^,]*)/,\n   \2/g' | while read -r sline; do
      [[ -n "$sline" ]] && echo "  subject: $sline"
    done
    echo "$issuerRaw" | sed -E 's/(, )?(CN=[^,]*)/,\n   \2/g' | while read -r iline; do
      [[ -n "$iline" ]] && echo "  issuer: $iline"
    done
    echo
  done
else
  fqdn=$(echo "$host" | sed 's/:.*//')
  mdName="Report-$fqdn.md"
  {
    echo "# Certificate Report"
    echo
    echo "**URL:** $url"
    echo
    echo "| Filename | Type | Subject | Issuer |"
    echo "|---|---|---|---|"
    for line in "${sorted[@]}"; do
      IFS='|' read -r _ fileName certType subjectRaw issuerRaw <<<"$line"
      mdSubject=$(echo "$subjectRaw" | sed -E 's/(, )?(CN=[^,]*)/,\n   \2/g' | tr '\n' ' ')
      mdIssuer=$(echo "$issuerRaw" | sed -E 's/(, )?(CN=[^,]*)/,\n   \2/g' | tr '\n' ' ')
      echo "| $fileName | $certType | $mdSubject | $mdIssuer |"
    done
  } > "$mdName"
  echo "Markdown report written to $mdName"
fi
